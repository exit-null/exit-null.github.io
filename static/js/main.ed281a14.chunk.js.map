{"version":3,"sources":["views/corona_india/segments/MapData.js","assets/img/logo.PNG","components/sidebar/sidebar.js","components/footer/footer.jsx","components/footer/footer.js","components/navbar/navbar.jsx","util.js","components/navbar/index.js","components/navbar/navbar.js","views/corona_india/segments/NumberPanel.js","views/corona_india/segments/AllInOneGraph.js","views/corona_india/segments/Top10India.js","views/corona_india/segments/IndiaMap.js","views/corona_india/segments/StateWiseData.js","constants.js","views/corona_india/index.js","views/corona_world/segments/NumberPanel.js","views/corona_world/segments/CountryWiseData.js","views/corona_world/index.js","routes.js","layouts/main.js","App.js","serviceWorker.js","index.js","variables/ChartOptions.js"],"names":["cnf","cnf_code","forEach","element","id","push","rec","rec_code","dec","dec_code","pop","pop_code","ppm","ppm_code","mor","mor_code","tst","tst_code","tpm","tpm_code","module","exports","ls","require","Sidebar","props","activateMode","document","body","classList","length","add","remove","window","location","reload","linkOnClick","documentElement","activeRoute","bind","routeName","this","pathname","indexOf","bgColor","routes","logo","rtlActive","logoImg","logoText","undefined","outterLink","href","className","target","onClick","toggleSidebar","src","imgSrc","alt","text","to","innerLink","data","ref","Nav","map","prop","key","redirect","path","pro","layout","activeClassName","icon","name","React","Component","defaultProps","template","Container","fluid","Date","getFullYear","Footer","call","TimeAgo","addLocale","en","timeAgo","Template","updateColor","innerWidth","state","collapseOpen","setState","color","toggleCollapse","renderLog","flag","index","DropdownItem","style","fontSize","fontWeight","format","substr","update","split","Fragment","NavLink","currentTheme","newNotification","clearNotification","modalSearch","white","Object","keys","e","addEventListener","get","Axios","then","response","latest_log","sort","reverse","splice","set","log","removeEventListener","Navbar","classNames","expand","toggled","sidebarOpened","type","NavbarBrand","preventDefault","brandText","aria-expanded","aria-label","data-target","data-toggle","Collapse","navbar","isOpen","InputGroup","Button","UncontrolledDropdown","nav","DropdownToggle","caret","DropdownMenu","right","tag","NumberPanel","showMessage","confirmed","CommaNumber","deceased","recovered","active","dact","Number","parseInt","dconfirmed","ddeceased","drecovered","dactive","today_test","samplereportedtoday","list","ele","link","Col","lg","Card","CardHeader","CardTitle","CSSTransition","in","timeout","appear","Row","AllInOneGraph","setBgChartData","currentChartData","setChartData","i","labels_","conf","act","x","y","getCurrentCount","dataNumber","Count","len","formChartFromData","canvas","gradientStroke","getContext","createLinearGradient","addColorStop","renderData","renderLable","labels","datasets","label","fill","backgroundColor","borderColor","borderWidth","borderDash","borderDashOffset","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBorderWidth","pointRadius","prevData","minHeight","sm","ButtonGroup","size","defaultChecked","CardBody","options","OptionLine","Top10India","a","b","parseFloat","counter","lb","number","hoverBackgroundColor","height","OptionBar","ReactFusioncharts","fcRoot","FusionCharts","Maps","India","charts","IndiaMap","d","theme","dataSource","chart","numbersuffix","includevalueinlabels","showlabels","showLegend","labelsepchar","showmarkerlabels","showBorder","borderAlpha","showCanvasBorder","colorrange","minvalue","code","gradient","marginBottom","textAlign","sideNote","width","dataFormat","StateWiseData","createTheme","primary","secondary","background","default","divider","context","action","button","hover","int","intf","toLocaleString","total","cnf_str","rec_str","dec_str","confirmedsor","activesor","recoveredsor","deaths","deathssor","customStyles","rows","headCells","cells","align","sortFunction","field","direction","localeCompare","tot","padding","title","columns","selector","wrap","center","sortable","allowOverflow","highlightOnHover","STATE_NAMES","AP","AR","AS","BR","CT","GA","GJ","HR","HP","JH","KA","KL","MP","MH","MN","ML","MZ","NL","OR","PB","RJ","SK","TN","TG","TR","UT","UP","WB","AN","CH","DN","DL","JK","LA","LD","PY","TT","UN","STATE_ID_CODES","stateCodes","stateCodesMap","STATE_POPULATIONS","STATE_POPULATIONS_MIL","reduce","res","stateCode","CoronaIndia","RenderWhenNotNull","maps2","maps3","flt","cnf2","value","statewise","inf","current_number","toFixed","maps1","xs","md","time_series","maxHeight","topstates","series","tests","curr","cr_status","values","Obj","str","CountryWiseData","country","testssor","cpm","cpmsor","dpm","dpmsor","tpmsor","console","pagination","paginationPerPage","paginationRowsPerPageOptions","component","flg","world_data","graphCss","countrywise_data","loading","Loading","marginLeft","marginTop","border","fetcher","now","loader","slice","Main","toggle","getRoutes","handleBgClick","getBrandText","from","App","Boolean","hostname","match","hist","createBrowserHistory","ReactDOM","render","history","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","maintainAspectRatio","legend","display","tooltips","titleFontColor","bodyFontColor","bodySpacing","xPadding","mode","intersect","position","responsive","scales","yAxes","barPercentage","stacked","gridLines","drawBorder","zeroLineColor","ticks","suggestedMin","suggestedMax","fontColor","xAxes","source","autoSkip","maxTicksLimit","bounds"],"mappings":"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","file":"static/js/main.ed281a14.chunk.js","sourcesContent":["//Confirmed\r\nlet cnf = {};\r\nlet cnf_mx = [\"50\",\"300\",\"500\",\"1000\",\"3000\",\"5000\",\"8000\",\"12000\",\"20000\",\"30000\",\"1200000\"];\r\nlet cnf_code = [\"#ffcccc\",\"#ffb3b3\",\"#ff9999\",\"#ff8080\",\"#ff6666\",\"#ff3333\",\r\n                \"#ff0000\",\"#b30000\",\"#800000\",\"#4d0000\",\"#1a0000\"];\r\ncnf['color'] =  [];\r\ncnf_mx.forEach((element,id) => {\r\n    cnf['color'].push({\"maxvalue\" : element, \"code\" : cnf_code[id]});\r\n});\r\ncnf['title'] = 'Confirmed Cases';\r\ncnf['data'] = [];\r\n\r\n//Recovered\r\nlet rec = {};\r\nlet rec_mx = [\"50\",\"300\",\"500\",\"1000\",\"3000\",\"5000\",\"8000\",\"10000\",\"15000\",\"25000\",\"65000\"];\r\nlet rec_code = [\"#ccffcc\",\"#b3ffb3\",\"#99ff99\",\"#80ff80\",\"#66ff66\",\"#33ff33\",\r\n                \"#00ff00\",\"#00b300\",\"#008000\",\"#004d00\",\"#001a00\"];\r\nrec['color'] =  [];\r\nrec_mx.forEach((element,id) => {\r\n    rec['color'].push({\"maxvalue\" : element, \"code\" : rec_code[id]});\r\n});\r\nrec['title'] = 'Total Recovered';\r\nrec['data'] = [];\r\n\r\n//Deceased\r\nlet dec = {};\r\nlet dec_mx = [\"5\",\"10\",\"50\",\"100\",\"250\",\"500\",\"800\",\"1100\",\"2000\",\"4500\"];\r\nlet dec_code = [\"#e6e6e6\",\"#cccccc\",\"#bfbfbf\",\"#b3b3b3\",\"#999999\",\r\n                \"#808080\",\"#666666\",\"#4d4d4d\",\"#333333\",\"#1a1a1a\"];\r\ndec['color'] =  [];\r\ndec_mx.forEach((element,id) => {\r\n    dec['color'].push({\"maxvalue\" : element, \"code\" : dec_code[id]});\r\n});\r\ndec['title'] = 'Total Deceased';\r\ndec['data'] = [];\r\n\r\n//statewise Population\r\nlet pop = {};\r\nlet pop_mx = [\"200000\",\"3000000\",\"8000000\",\"15000000\",\"30000000\",\"50000000\",\"70000000\",\"100000000\",\"120000000\",\"250000000\"];\r\nlet pop_code = [\"#ffe0b3\",\"#ffcc80\",\"#ffc266\",\"#ffad33\",\"#ff9900\",\r\n                \"#e68a00\",\"#cc7a00\",\"#995c00\",\"#4d2e00\",\"#1a0f00\"];\r\npop['color'] =  [];\r\npop_mx.forEach((element,id) => {\r\n    pop['color'].push({\"maxvalue\" : element, \"code\" : pop_code[id]});\r\n});\r\npop['title'] = 'Total Population';\r\npop['data'] = [];\r\n\r\n//statewise Population Density\r\nlet ppm = {};\r\nlet ppm_mx = [\"10\",\"30\",\"40\",\"60\",\"80\",\"120\",\"200\",\"300\",\"500\",\"900\",\"2500\"];\r\nlet ppm_code = [\"#e6ffff\",\"#b3ffff\",\"#80ffff\",\"#00ffff\",\"#00b3b3\",\r\n                \"#009999\",\"#008080\",\"#006666\",\"#004d4d\",\"#001a1a\",\"#000000\"];\r\nppm['color'] =  [];\r\nppm_mx.forEach((element,id) => {\r\n    ppm['color'].push({\"maxvalue\" : element, \"code\" : ppm_code[id]});\r\n});\r\nppm['title'] = 'Confirmed Per Million';\r\nppm['data'] = [];\r\n\r\n//statewise mortality rate\r\nlet mor = {};\r\nlet mor_mx = [\"0.3\",\"0.8\",\"1.2\",\"1.4\",\"1.9\",\"2.5\",\"3.4\",\"4\",\"6\",\"7\"];\r\nlet mor_code = [\"#e6f6e0\",\"#ccccc0\",\"#bfbfb0\",\"#b3b3b0\",\"#999990\",\r\n                \"#8c8c80\",\"#666660\",\"#4d4d40\",\"#333330\",\"#1a1a10\"];\r\nmor['color'] =  [];\r\nmor_mx.forEach((element,id) => {\r\n    mor['color'].push({\"maxvalue\" : element, \"code\" : mor_code[id]});\r\n});\r\nmor['title'] = 'Mortality Rate';\r\nmor['data'] = [];\r\n\r\n//statewise tests\r\nlet tst = {};\r\nlet tst_mx = [\"30000\",\"50000\",\"90000\",\"120000\",\"180000\",\"220000\",\"330000\",\"490000\",\"510000\",\"800000\"];\r\nlet tst_code = [\"#ebebfa\",\"#d6d6f5\",\"#adadeb\",\"#8585e0\",\"#5c5cd6\",\r\n                \"#3333cc\",\"#2929a3\",\"#1f1f7a\",\"#141452\",\"#0a0a29\"];\r\ntst['color'] =  [];\r\ntst_mx.forEach((element,id) => {\r\n    tst['color'].push({\"maxvalue\" : element, \"code\" : tst_code[id]});\r\n});\r\ntst['title'] = 'Total Tests';\r\ntst['data'] = [];\r\n\r\n//statewise tests per million\r\nlet tpm = {};\r\nlet tpm_mx = [\"500\",\"800\",\"1100\",\"1500\",\"1900\",\"2400\",\"2800\",\"5000\",\"8000\",\"32000\"];\r\nlet tpm_code = [\"#f9e6ff\",\"#ecb3ff\",\"#e699ff\",\"#d966ff\",\"#cc33ff\",\r\n                \"#ac00e6\",\"#8600b3\",\"#600080\",\"#39004d\",\"#13001a\"];\r\ntpm['color'] =  [];\r\ntpm_mx.forEach((element,id) => {\r\n    tpm['color'].push({\"maxvalue\" : element, \"code\" : tpm_code[id]});\r\n});\r\ntpm['title'] = 'Tests Per Million';\r\ntpm['data'] = [];\r\n\r\nmodule.exports = {cnf, rec, dec, pop, tst, ppm, mor, tpm};","module.exports = __webpack_public_path__ + \"static/media/logo.4ecee4f1.PNG\";","\r\nimport React from \"react\";\r\nimport { NavLink, Link } from \"react-router-dom\";\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nimport { Nav, NavLink as ReactstrapNavLink } from \"reactstrap\";\r\nconst ls = require('local-storage');\r\n\r\nclass Sidebar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.activeRoute.bind(this);\r\n  }\r\n  // verifies if routeName is the one active (in browser input)\r\n  activeRoute(routeName) {\r\n    return this.props.location.pathname.indexOf(routeName) > -1 ? \"active\" : \"\";\r\n  }\r\n\r\n  activateMode = () => {\r\n    const classLength = document.body.classList.length;\r\n    if(classLength == 1) \r\n    {\r\n      document.body.classList.add(\"white-content\");\r\n      ls('c19theme','1');\r\n    }\r\n    else \r\n    {\r\n      document.body.classList.remove(\"white-content\");\r\n      ls.remove('c19theme');\r\n    }\r\n    window.location.reload();\r\n  };\r\n\r\n  linkOnClick = () => {\r\n    document.documentElement.classList.remove(\"nav-open\");\r\n  };\r\n  render() {\r\n    const { bgColor, routes, rtlActive, logo } = this.props;\r\n    let logoImg = null;\r\n    let logoText = null;\r\n    if (logo !== undefined) {\r\n      if (logo.outterLink !== undefined) {\r\n        logoImg = (\r\n          <a\r\n            href={logo.outterLink}\r\n            className=\"simple-text logo-mini\"\r\n            target=\"_blank\"\r\n            onClick={this.props.toggleSidebar}\r\n          >\r\n            <div className=\"logo-img\">\r\n              <img src={logo.imgSrc} alt=\"react-logo\" />\r\n            </div>\r\n          </a>\r\n        );\r\n        logoText = (\r\n          <a\r\n            href={logo.outterLink}\r\n            className=\"simple-text logo-normal\"\r\n            target=\"_blank\"\r\n            onClick={this.props.toggleSidebar}\r\n          >\r\n            {logo.text}\r\n          </a>\r\n        );\r\n      } else {\r\n        logoImg = (\r\n          <Link\r\n            to={logo.innerLink}\r\n            className=\"simple-text logo-mini\"\r\n            onClick={this.props.toggleSidebar}\r\n          >\r\n            <div className=\"logo-img\">\r\n              <img src={logo.imgSrc} alt=\"react-logo\" />\r\n            </div>\r\n          </Link>\r\n        );\r\n        logoText = (\r\n          <Link\r\n            to={logo.innerLink}\r\n            className=\"simple-text logo-normal\"\r\n            onClick={this.props.toggleSidebar}\r\n          >\r\n            {logo.text}\r\n          </Link>\r\n        );\r\n      }\r\n    }\r\n    return (\r\n      <div className=\"sidebar\" data={bgColor}>\r\n        <div className=\"sidebar-wrapper\" ref=\"sidebar\">\r\n          {logoImg !== null || logoText !== null ? (\r\n            <div className=\"logo\">\r\n              {logoImg}\r\n              {logoText}\r\n            </div>\r\n          ) : null}\r\n          <Nav>\r\n            {routes.map((prop, key) => {\r\n              if (prop.redirect) return null;\r\n              return (\r\n                <li\r\n                  className={\r\n                    this.activeRoute(prop.path) +\r\n                    (prop.pro ? \" active-pro\" : \"\")\r\n                  }\r\n                  key={key}\r\n                >\r\n                  <NavLink\r\n                    to={prop.layout + prop.path}\r\n                    className=\"nav-link\"\r\n                    activeClassName=\"active\"\r\n                    onClick={this.props.toggleSidebar}\r\n                  >\r\n                    <i className={prop.icon} />\r\n                    <p>{prop.name}</p>\r\n                  </NavLink>\r\n                </li>\r\n              );\r\n            })}\r\n            <li\r\n              className=\"active-pro\"\r\n              \r\n            >\r\n              <NavLink\r\n                    to=\"\"\r\n                    className=\"nav-link\"\r\n                    activeClassName=\"active\"\r\n                    onClick={this.activateMode}\r\n                  >\r\n                    <i className=\"tim-icons icon-bulb-63\" />\r\n                    <p>Change Theme</p>\r\n                  </NavLink>\r\n                \r\n            </li>\r\n          </Nav>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nSidebar.defaultProps = {\r\n  rtlActive: false,\r\n  bgColor: \"primary\",\r\n  routes: [{}]\r\n};\r\n\r\nSidebar.propTypes = {\r\n  // if true, then instead of the routes[i].name, routes[i].rtlName will be rendered\r\n  // insde the links of this component\r\n  rtlActive: PropTypes.bool,\r\n  bgColor: PropTypes.oneOf([\"primary\", \"blue\", \"green\"]),\r\n  routes: PropTypes.arrayOf(PropTypes.object),\r\n  logo: PropTypes.shape({\r\n    // innerLink is for links that will direct the user within the app\r\n    // it will be rendered as <Link to=\"...\">...</Link> tag\r\n    innerLink: PropTypes.string,\r\n    // outterLink is for links that will direct the user outside the app\r\n    // it will be rendered as simple <a href=\"...\">...</a> tag\r\n    outterLink: PropTypes.string,\r\n    // the text of the logo\r\n    text: PropTypes.node,\r\n    // the image src of the logo\r\n    imgSrc: PropTypes.string\r\n  })\r\n};\r\n\r\nexport default Sidebar;\r\n","import \"./footer.css\";\nimport React from \"react\";\nimport { Container, Row, Nav, NavItem, NavLink } from \"reactstrap\";\n\nfunction template() {\n  return (\n    <footer className=\"footer\">\n        <Container fluid>\n          <Nav>\n            {/*<NavItem>\n              <NavLink href=\"\">Contact us</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink href=\"\">About Us</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink href=\"\">Blog</NavLink>\n            </NavItem>*/}\n          </Nav>\n          <div className=\"copyright\">\n            © {new Date().getFullYear()} made with{\" \"}\n            <i className=\"tim-icons icon-heart-2\" /> by{\" \"}\n            <a\n              href=\"\"\n              target=\"_blank\"\n            >\n              Sayan Banerjee\n            </a>{\" \"}\n            for a better web.\n          </div>\n        </Container>\n      </footer>\n  );\n};\n\nexport default template;\n","import React    from \"react\";\nimport template from \"./footer.jsx\";\n\nclass Footer extends React.Component {\n  render() {\n    return template.call(this);\n  }\n}\n\nexport default Footer;\n","import \"./navbar.scss\";\nimport React from \"react\";\nimport Axios from 'axios';\nimport classNames from \"classnames\";\nimport {\n  Button,\n  Collapse,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  UncontrolledDropdown,\n  InputGroup,\n  NavbarBrand,\n  Navbar,\n  NavLink,\n  Nav,\n  Container\n} from \"reactstrap\";\nimport {addLineBreaks,timestampConverter} from '../../util';\nimport TimeAgo from 'javascript-time-ago';\nimport en from 'javascript-time-ago/locale/en';\nTimeAgo.addLocale(en);\nconst timeAgo = new TimeAgo('en-US');\nconst ls = require('local-storage');\nclass Template extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      collapseOpen: false,\n      modalSearch: false,\n      color: \"navbar-transparent\"\n    };\n  }\n  currentTheme(){\n    const body = document.body.classList;\n    let white = true;\n    Object.keys(body).map((e) => {if(body[e] === 'white-content') white = false;})\n    return white;\n  }\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.updateColor);\n    if(ls.get('c19theme'))\n    {\n      document.body.classList.remove(\"white-content\");\n    }\n    Axios.get('https://api.covid19india.org/updatelog/log.json')\n        .then( response => {\n            let latest_log = response.data.sort().reverse().splice(0,5);\n            let newNotification = false;\n            if(ls.get('covid19timestamp') !== latest_log[0]['timestamp'])\n            {\n              newNotification = true;\n              ls.set('covid19timestamp',latest_log[0]['timestamp']);\n            }\n            this.setState({\n              log : latest_log,\n              newNotification : newNotification\n            });\n        });\n  }\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateColor);\n  }\n  // function that adds color white/transparent to the navbar on resize (this is for the collapse)\n  updateColor = () => {\n    if (window.innerWidth < 993 && this.state.collapseOpen) {\n      this.setState({\n        color: \"bg-white\"\n      });\n    } else {\n      this.setState({\n        color: \"navbar-transparent\"\n      });\n    }\n  };\n  // this function opens and closes the collapse on small devices\n  toggleCollapse = () => {\n    if (this.state.collapseOpen) {\n      this.setState({\n        color: \"navbar-transparent\"\n      });\n    } else {\n      this.setState({\n        color: \"bg-white\"\n      });\n    }\n    this.setState({\n      collapseOpen: !this.state.collapseOpen\n    });\n  };\n  //This function is to toggle between light and dark mode\n  renderLog = (flag) => {\n    if(flag)\n    {\n      return  flag.map((element,index) => {\n                  return(\n                  <DropdownItem className=\"nav-item\" key={index}\n                                style={{fontSize: '14px'}}>\n                    <div style={{fontWeight: 'bold'}}>{ \" \"+timeAgo.format(new Date(element['timestamp']*1000))+\" \" }</div>\n                    {addLineBreaks(element['update'].substr(0, element.update.length - 1))}\n                  </DropdownItem>\n                  );\n                });\n    }\n    else return (\n      <NavLink>Loading.....</NavLink>\n    );\n  }\n  activateMode = () => {\n    const theme = this.currentTheme();\n    if(!theme) \n    {\n      document.body.classList.remove(\"white-content\");\n      ls('c19theme','1');\n    }\n    else \n    {\n      document.body.classList.add(\"white-content\");\n      ls.remove('c19theme');\n    }\n    window.location.reload();\n  };\n\n  newNotification = () => {\n    if(this.state.newNotification === true) return <div className=\"notification d-none d-lg-block d-xl-block\" />;\n  }\n\n  clearNotification = () => {\n    this.setState({newNotification : false});\n  }\n\n  render() {\n    return (\n      <>\n        <Navbar\n          className={classNames(\"navbar-absolute\", this.state.color)}\n          expand=\"lg\"\n        >\n          <Container fluid>\n            <div className=\"navbar-wrapper\">\n              <div\n                className={classNames(\"navbar-toggle d-inline\", {\n                  toggled: this.props.sidebarOpened\n                })}\n              >\n                <button\n                  className=\"navbar-toggler\"\n                  type=\"button\"\n                  onClick={this.props.toggleSidebar}\n                >\n                  <span className=\"navbar-toggler-bar bar1\" />\n                  <span className=\"navbar-toggler-bar bar2\" />\n                  <span className=\"navbar-toggler-bar bar3\" />\n                </button>\n              </div>\n              <NavbarBrand href=\"#pablo\" onClick={e => e.preventDefault()}>\n                {this.props.brandText}\n              </NavbarBrand>\n            </div>\n            <button\n              aria-expanded={false}\n              aria-label=\"Toggle navigation\"\n              className=\"navbar-toggler\"\n              data-target=\"#navigation\"\n              data-toggle=\"collapse\"\n              id=\"navigation\"\n              type=\"button\"\n              onClick={this.toggleCollapse}\n            >\n              <span className=\"navbar-toggler-bar navbar-kebab\" />\n              <span className=\"navbar-toggler-bar navbar-kebab\" />\n              <span className=\"navbar-toggler-bar navbar-kebab\" />\n            </button>\n            <Collapse navbar isOpen={this.state.collapseOpen}>\n              <Nav className=\"ml-auto\" navbar>\n              <InputGroup className=\"search-bar\">\n                  <Button\n                    color=\"link\"\n                    id=\"search-button\"\n                    onClick={this.activateMode}\n                  >\n                    <i className=\"tim-icons icon-bulb-63\" />\n                    <span className=\"d-lg-none d-md-block\">Theme</span>\n                  </Button>\n              </InputGroup> \n                <UncontrolledDropdown nav>\n                  <DropdownToggle\n                    caret\n                    color=\"default\"\n                    data-toggle=\"dropdown\"\n                    nav\n                    onClick={this.clearNotification}\n                  >\n                    {this.newNotification()}\n                    <i className=\"tim-icons icon-bell-55\" />\n                    <p className=\"d-lg-none\">Notifications</p>\n            \n                  </DropdownToggle>\n                  <DropdownMenu className=\"dropdown-navbar\" right tag=\"ul\">\n                    {this.renderLog(this.state.log)}\n                  </DropdownMenu>\n                </UncontrolledDropdown>{/*\n                <UncontrolledDropdown nav>\n                  <DropdownToggle\n                    caret\n                    color=\"default\"\n                    data-toggle=\"dropdown\"\n                    nav\n                    onClick={e => e.preventDefault()}\n                  >\n                    <div className=\"photo\">\n                      <img alt=\"...\" src={require(\"../../assets/img/anime3.png\")} />\n                    </div>\n                    <b className=\"caret d-none d-lg-block d-xl-block\" />\n                    <p className=\"d-lg-none\">Log out</p>\n                  </DropdownToggle>\n                  <DropdownMenu className=\"dropdown-navbar\" right tag=\"ul\">\n                    <NavLink tag=\"li\">\n                      <DropdownItem className=\"nav-item\">Profile</DropdownItem>\n                    </NavLink>\n                    <NavLink tag=\"li\">\n                      <DropdownItem className=\"nav-item\">Settings</DropdownItem>\n                    </NavLink>\n                    <DropdownItem divider tag=\"li\" />\n                    <NavLink tag=\"li\">\n                      <DropdownItem className=\"nav-item\">Log out</DropdownItem>\n                    </NavLink>\n                  </DropdownMenu>\n              </UncontrolledDropdown>*/}\n                <li className=\"separator d-lg-none\" />\n              </Nav>\n            </Collapse>\n          </Container>\n        </Navbar>\n      </>\n    );\n  }\n};\n\nexport default Template;\n\n","import React from 'react';\r\nexport const addLineBreaks = string => string.split('\\n').map((text, index) => (\r\n    <React.Fragment key={`${text}-${index}`}>\r\n    {text}\r\n    <br />\r\n    </React.Fragment>\r\n));\r\nconst monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\r\n  \"Jul\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"\r\n];\r\nexport const timestampConverter = unix_timestamp => {\r\n    let date = new Date(unix_timestamp * 1000);\r\n    let hours = date.getHours()%12 + 1;\r\n    let minutes = \"0\" + date.getMinutes();\r\n    let seconds = \"0\" + date.getSeconds();\r\n    let formattedTime = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\r\n    return date.getDate()+\" \"+monthNames[date.getMonth()]+\"  \"+formattedTime;\r\n};","import navbar from \"./navbar\";\nconst Navbar = navbar;\nexport default Navbar;\n","import React    from \"react\";\nimport Template from \"./navbar.jsx\";\n\nclass navbar extends React.Component {\n  render() {\n    return <Template {...this.props}/>;\n  }\n}\n\nexport default navbar;\n","import React from \"react\";\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport CommaNumber from 'comma-number';\r\n//import '../../../assets/css/dummy.css';\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardTitle,\r\n  Row,\r\n  Col\r\n} from \"reactstrap\";\r\n\r\n\r\nclass NumberPanel extends React.Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            showMessage : true\r\n        };\r\n    }\r\n    \r\n    render(){\r\n        if(this.props.data == null) return null;\r\n        let confirmed = CommaNumber(this.props.data['confirmed']);\r\n        let deceased = CommaNumber(this.props.data['deaths']);\r\n        let recovered = CommaNumber(this.props.data['recovered']);\r\n        let active = CommaNumber(this.props.data['active']);\r\n        let dcon = Number.parseInt(this.props.data['deltaconfirmed']);\r\n        let drec = Number.parseInt(this.props.data['deltarecovered']);\r\n        let ddec = Number.parseInt(this.props.data['deltadeaths']);\r\n        let dact = dcon - drec - ddec;\r\n        let dconfirmed = \"[ +\"+CommaNumber(this.props.data['deltaconfirmed'])+\" ]\";\r\n        let ddeceased = \"[ +\"+CommaNumber(this.props.data['deltadeaths'])+\" ]\";\r\n        let drecovered = \"[ +\"+CommaNumber(this.props.data['deltarecovered'])+\" ]\";\r\n        let dactive = \"[ +\"+CommaNumber(dact)+\" ]\";\r\n        let today_test = \"[ +\"+CommaNumber(this.props.data.samplereportedtoday)+\" ]\";\r\n        let tests = CommaNumber(this.props.data['totalsamplestested']);\r\n        let listContent = [\r\n            [2, \"Confirmed\", \"text-danger\", confirmed, dconfirmed],\r\n            [2, \"Active\", \"text-primary\", active, dactive],\r\n            [2, \"Recovered\", \"text-success\", recovered, drecovered],\r\n            [2, \"Deceased\", \"text-defalut\", deceased, ddeceased],\r\n            [2, \"Population\", \"text-warning\", \"1.378 B\", \"\"],\r\n            [2, \"Tests\", \"text-info\", tests, today_test]\r\n        ];\r\n        //const link\r\n        const list = listContent.map((ele, key) => {\r\n            let link = null, update= null;\r\n            if(key == 5) link = <a href={this.props.data['source']} target=\"_blank\">\r\n                    <i className={\"pull-right tim-icons icon-attach-87 \"+ele[2]} />\r\n                </a>\r\n            if(ele[4].length != 0)\r\n            {\r\n                update = <div style={{fontSize : \"15px\"}}>{ele[4]}</div>;\r\n            }\r\n            else update = <div style={{fontSize : \"15px\"}}><br></br></div>;\r\n            return (\r\n                <Col lg={ele[0]} key={key}>\r\n                <Card className=\"card-chart\">\r\n                    <CardHeader>\r\n                    <h1 className=\"card-category\">\r\n                        <span className=\"card-big-text\"> {ele[1]} </span>\r\n                        {link}\r\n                    </h1>\r\n                    {update}\r\n                    <CardTitle tag=\"h4\">\r\n                        <i className={\"tim-icons icon-world \"+ele[2]} />{\" \"}\r\n                        {ele[3]}\r\n                    </CardTitle>\r\n                    </CardHeader>\r\n                </Card>\r\n                </Col>\r\n            );\r\n        });\r\n        return (\r\n      \r\n            <>\r\n                <CSSTransition\r\n                    in={this.state.showMessage}\r\n                    timeout={1000}\r\n                    appear={true}\r\n                    classNames=\"fader\"\r\n                >\r\n                    <Row>\r\n                        {list}\r\n                    </Row>\r\n                </CSSTransition>\r\n            </>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default NumberPanel;","import React from \"react\";\r\nimport { Line,Bar } from \"react-chartjs-2\";\r\nimport CommaNumber from 'comma-number';\r\nimport classNames from 'classnames';\r\n// reactstrap components\r\nimport {\r\n  Button,\r\n  ButtonGroup,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  CardTitle,\r\n  Row,\r\n  Col,\r\n} from \"reactstrap\";\r\n\r\nimport {OptionLine} from '../../../variables/ChartOptions';\r\n\r\nclass AllInOneGraph extends React.Component\r\n{  \r\n  constructor(props) {\r\n        super(props);\r\n        this.ele = []; this.labels_ = []; this.rec=[]; this.dec=[]; this.act=[];\r\n        this.prevData = null;\r\n        this.state = {\r\n          currentChartData: \"data1\",\r\n        };\r\n        this.setChartData();\r\n    }\r\n    setBgChartData = name => {\r\n        this.setState({\r\n          currentChartData: name\r\n        });\r\n    };\r\n    setChartData = () => {\r\n      let data = this.props.data;\r\n      for(let i=data.length-40; i<data.length; i++)\r\n      {\r\n        this.labels_.push(data[i]['date']);\r\n        let conf = Number.parseInt(data[i]['totalconfirmed']);\r\n        let rec = Number.parseInt(data[i]['totalrecovered']);\r\n        let dec = Number.parseInt(data[i]['totaldeceased']);\r\n        \r\n        let act = conf - rec - dec;\r\n        this.ele.push({x: new Date(data[i]['date']), y : conf});\r\n        this.rec.push({x: new Date(data[i]['date']), y : rec});\r\n        this.dec.push({x: new Date(data[i]['date']), y : dec});\r\n        this.act.push({x: new Date(data[i]['date']), y : act});\r\n      }\r\n    }\r\n    getCurrentCount = (dataNumber) => {\r\n      let Count = null, len = this.props.data.length - 1;\r\n      let conf = Number.parseInt(this.props.data[len]['totalconfirmed']);\r\n      let rec = Number.parseInt(this.props.data[len]['totalrecovered']);\r\n      let dec = Number.parseInt(this.props.data[len]['totaldeceased']);\r\n      let act = conf - rec - dec;\r\n      if(dataNumber === \"data1\") \r\n      {\r\n        Count = conf;\r\n      }\r\n      else if(dataNumber === \"data2\") \r\n      {\r\n        Count = rec;\r\n      }\r\n      else if(dataNumber === \"data3\")\r\n      {\r\n        Count = dec;\r\n      }\r\n      else\r\n      {\r\n        Count = act;\r\n      }\r\n      return CommaNumber(Count);\r\n    }\r\n    formChartFromData = (dataNumber) => {\r\n      return canvas => {\r\n          let ctx = canvas.getContext(\"2d\");\r\n          let gradientStroke = ctx.createLinearGradient(0, 230, 0, 50);\r\n          gradientStroke.addColorStop(1, \"rgba(29,140,248,0.2)\");\r\n          gradientStroke.addColorStop(0.4, \"rgba(29,140,248,0.0)\");\r\n          gradientStroke.addColorStop(0, \"rgba(29,140,248,0)\"); \r\n          let renderData = null, renderLable = null;\r\n          if(dataNumber === \"data1\") \r\n          {\r\n            renderData = [...this.ele];\r\n            renderLable = \"Total Confirmed\";\r\n          }\r\n          else if(dataNumber === \"data2\") \r\n          {\r\n            renderData = [...this.rec];\r\n            renderLable = \"Total Recovered\";\r\n          }\r\n          else if(dataNumber === \"data3\")\r\n          {\r\n            renderData = [...this.dec];\r\n            renderLable = \"Total Deceased\";\r\n          }\r\n          else\r\n          {\r\n            renderData = [...this.act];\r\n            renderLable = \"Total Active\";\r\n          }\r\n          return {\r\n            labels : this.labels_,\r\n            datasets: [\r\n              {\r\n                label: renderLable,\r\n                fill: true,\r\n                backgroundColor: gradientStroke,\r\n                borderColor: \"#1f8ef1\",\r\n                borderWidth: 1.5,\r\n                borderDash: [],\r\n                borderDashOffset: 0.0,\r\n                pointBackgroundColor: \"#1f8ef1\",\r\n                pointBorderColor: \"rgba(255,255,255,0)\",\r\n                pointHoverBackgroundColor: \"#1f8ef1\",\r\n                pointBorderWidth: 20,\r\n                pointHoverRadius: 4,\r\n                pointHoverBorderWidth: 15,\r\n                pointRadius: 2,\r\n                data: renderData\r\n              }]\r\n          };\r\n      };\r\n    }\r\n\r\n    render()\r\n    {\r\n      if(this.props.data == null) return null;  \r\n      return(\r\n            <>\r\n              <Card className=\"card-chart\" style={{minHeight : '480px'}}>\r\n                <CardHeader>\r\n                  <Row>\r\n                    <Col className=\"text-left\" sm=\"6\">\r\n                      <h5 className=\"card-category\">Indian Statistics</h5>\r\n                      <CardTitle tag=\"h3\"> {this.getCurrentCount(this.state.currentChartData)} </CardTitle>\r\n                    </Col>\r\n                    <Col sm=\"6\">\r\n                      <ButtonGroup\r\n                        className=\"btn-group-toggle float-right\"\r\n                        data-toggle=\"buttons\"\r\n                      >\r\n                        <Button\r\n                          tag=\"label\"\r\n                          className={classNames(\"btn-simple\", {\r\n                            active: this.state.currentChartData === \"data1\"\r\n                          })}\r\n                          color=\"info\"\r\n                          id=\"0\"\r\n                          size=\"sm\"\r\n                          onClick={() => this.setBgChartData(\"data1\")}\r\n                        >\r\n                          <input\r\n                            defaultChecked\r\n                            className=\"d-none\"\r\n                            name=\"options\"\r\n                            type=\"radio\"\r\n                          />\r\n                          <span className=\"d-none d-sm-block d-md-block d-lg-block d-xl-block\">\r\n                            Confirmed\r\n                          </span>\r\n                          <span className=\"d-block d-sm-none\">\r\n                            C\r\n                          </span>\r\n                        </Button>\r\n                        <Button\r\n                          color=\"info\"\r\n                          id=\"1\"\r\n                          size=\"sm\"\r\n                          tag=\"label\"\r\n                          className={classNames(\"btn-simple\", {\r\n                            active: this.state.currentChartData === \"data4\"\r\n                          })}\r\n                          onClick={() => this.setBgChartData(\"data4\")}\r\n                        >\r\n                          <input\r\n                            className=\"d-none\"\r\n                            name=\"options\"\r\n                            type=\"radio\"\r\n                          />\r\n                          <span className=\"d-none d-sm-block d-md-block d-lg-block d-xl-block\">\r\n                            &#160;Active&#160;\r\n                          </span>\r\n                          <span className=\"d-block d-sm-none\">\r\n                            A\r\n                          </span>\r\n                        </Button>\r\n                        <Button\r\n                          color=\"info\"\r\n                          id=\"1\"\r\n                          size=\"sm\"\r\n                          tag=\"label\"\r\n                          className={classNames(\"btn-simple\", {\r\n                            active: this.state.currentChartData === \"data2\"\r\n                          })}\r\n                          onClick={() => this.setBgChartData(\"data2\")}\r\n                        >\r\n                          <input\r\n                            className=\"d-none\"\r\n                            name=\"options\"\r\n                            type=\"radio\"\r\n                          />\r\n                          <span className=\"d-none d-sm-block d-md-block d-lg-block d-xl-block\">\r\n                            Recovered\r\n                          </span>\r\n                          <span className=\"d-block d-sm-none\">\r\n                            R\r\n                          </span>\r\n                        </Button>\r\n                        <Button\r\n                          color=\"info\"\r\n                          id=\"2\"\r\n                          size=\"sm\"\r\n                          tag=\"label\"\r\n                          className={classNames(\"btn-simple\", {\r\n                            active: this.state.currentChartData === \"data3\"\r\n                          })}\r\n                          onClick={() => this.setBgChartData(\"data3\")}\r\n                        >\r\n                          <input\r\n                            className=\"d-none\"\r\n                            name=\"options\"\r\n                            type=\"radio\"\r\n                          />\r\n                          <span className=\"d-none d-sm-block d-md-block d-lg-block d-xl-block\">\r\n                            Deceased\r\n                          </span>\r\n                          <span className=\"d-block d-sm-none\">\r\n                            D\r\n                          </span>\r\n                        </Button>\r\n                      </ButtonGroup>\r\n                    </Col>\r\n                  </Row>\r\n                </CardHeader>\r\n                <CardBody>\r\n                  <div className=\"chart-area\">\r\n                    <Line\r\n                      data={this.formChartFromData(this.state.currentChartData)}\r\n                      options={OptionLine}\r\n                    />\r\n                  </div>\r\n                </CardBody>\r\n              </Card>\r\n\r\n          \r\n          </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AllInOneGraph;","import React from 'react';\r\nimport { Line,Bar } from \"react-chartjs-2\";\r\nimport CommaNumber from 'comma-number';\r\nimport classNames from 'classnames';\r\n// reactstrap components\r\nimport {\r\n  Button,\r\n  ButtonGroup,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  CardTitle,\r\n  Row,\r\n  Col,\r\n} from \"reactstrap\";\r\n\r\nimport {OptionBar} from '../../../variables/ChartOptions';\r\nclass Top10India extends React.Component{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.ele = []; this.labels_=[];\r\n        this.setChartData(this.props.type);\r\n    }\r\n    \r\n    setChartData = (type) => {\r\n        let data = [];\r\n        Object.keys(this.props.data).map((element) => {\r\n          data.push(this.props.data[element]);\r\n        });\r\n        data.sort((a,b) => {return -(Number.parseFloat(a[type])-Number.parseFloat(b[type]))});\r\n        let counter = 0;\r\n        let lb = (this.props.label == 0) ? 'state' : 'statecode';\r\n        //console.log(data);\r\n        data.forEach(element => {\r\n          if(counter > -1 && counter < this.props.number)\r\n          {\r\n            this.labels_.push(((element[lb]).length > 15) ? element['statecode'] : element[lb]);\r\n            this.ele.push({x: element['state'], y : element[type]});\r\n          }\r\n          counter += 1;\r\n        });\r\n    }\r\n\r\n    formChartFromData = () => {\r\n        return canvas => {\r\n            let ctx = canvas.getContext(\"2d\");\r\n            let gradientStroke = ctx.createLinearGradient(0, 230, 0, 50);\r\n            gradientStroke.addColorStop(1, \"rgba(255,105,180,0.1)\");\r\n            gradientStroke.addColorStop(0.4, \"rgba(255,105,180,0.0)\");\r\n            gradientStroke.addColorStop(0, \"rgba(255,105,180,0)\");\r\n            let renderData = [...this.ele], renderLable = \"Confirmed\";\r\n            return {\r\n              labels : this.labels_,\r\n              datasets: [\r\n                {\r\n                  label: renderLable,\r\n                  fill: true,\r\n                  backgroundColor: gradientStroke,\r\n                  hoverBackgroundColor: gradientStroke,\r\n                  borderColor: \"#FF69B4\",\r\n                  borderWidth: 2,\r\n                  borderDash: [],\r\n                  borderDashOffset: 0.0,\r\n                  pointBackgroundColor: \"#FF69B4\",\r\n                  pointBorderColor: \"rgba(255,255,255,0)\",\r\n                  pointHoverBackgroundColor: \"#FF69B4\",\r\n                  pointBorderWidth: 20,\r\n                  pointHoverRadius: 4,\r\n                  pointHoverBorderWidth: 15,\r\n                  pointRadius: 4,\r\n                  data: renderData\r\n                }]\r\n            };\r\n        };\r\n    }\r\n\r\n    render(){\r\n        return(\r\n        <>\r\n            <Card className=\"card-chart\" style={{height: '480px'}}>\r\n                <CardHeader>\r\n                  <h5 className=\"card-category\">Top {this.props.number} States</h5>\r\n                  <CardTitle tag=\"h4\">\r\n                    <i className=\"tim-icons icon-bell-55 text-primary\" />{\" \"}\r\n                    {this.props.text}\r\n                  </CardTitle>\r\n                </CardHeader>\r\n                <CardBody>\r\n                  <div className=\"chart-area\">\r\n                    <Bar\r\n                      data={this.formChartFromData()}\r\n                      options={OptionBar}\r\n                    />\r\n                  </div>\r\n                </CardBody>\r\n            </Card>\r\n        </>);\r\n    }\r\n}\r\n\r\nexport default Top10India;","import React from 'react';\r\n\r\nimport FusionCharts from \"fusioncharts\";\r\nimport Maps from 'fusioncharts/fusioncharts.maps';\r\nimport India from 'fusioncharts/maps/fusioncharts.india';\r\nimport charts from \"fusioncharts/fusioncharts.charts\";\r\nimport ReactFusioncharts from \"react-fusioncharts\";\r\nimport {Card, CardBody, CardHeader} from 'reactstrap';\r\n\r\n// Resolves charts dependancy\r\nReactFusioncharts.fcRoot(FusionCharts,Maps,India,charts);\r\n\r\nclass IndiaMap extends React.Component {\r\n  constructor(props)\r\n  {\r\n    super(props);\r\n    let d = this.props.data;\r\n    const theme = this.currentTheme();\r\n    this.dataSource = {\r\n      chart: {\r\n        numbersuffix: \".\",\r\n        includevalueinlabels: \"0\",\r\n        showlabels : \"0\",\r\n        showLegend : \"0\",\r\n        labelsepchar: \": \",\r\n        showmarkerlabels: \"0\",\r\n        bgColor: !theme ? \"#27293d\" : \"#ffffff\",\r\n        showBorder:'1',\r\n        borderAlpha:'30',\r\n        showCanvasBorder:'0',\r\n        \"entityFillHoverColor\": \"#E5E5E9\",\r\n      },\r\n      colorrange: {\r\n        minvalue: \"0\",\r\n        code: \"#ffffff\",\r\n        gradient: \"1\",\r\n        \"color\": d['color']\r\n      },\r\n      data: d['data']\r\n    };\r\n  }\r\n  currentTheme(){\r\n    const body = document.body.classList;\r\n    let white = false;\r\n    Object.keys(body).map((e) => {if(body[e] === 'white-content') white = true;})\r\n    return white;\r\n  }\r\n  render() {\r\n    return (\r\n        <Card className=\"card-chart\">\r\n            <CardHeader>\r\n                <h3 className=\"card-category\" style={{marginBottom : '0px'}}>\r\n                <span style={{fontSize : \"20px\", textAlign : \"left\"}}>\r\n                  {this.props.data['title']} </span>\r\n                <span className='pull-right' style={{fontSize : \"18px\", textAlign : \"right\"}}>\r\n                  {this.props.data.sideNote} </span>\r\n                </h3>\r\n            </CardHeader>\r\n            <CardBody>\r\n                <div className=\"chart-area\" style={{height: this.props.height}} >\r\n                <ReactFusioncharts\r\n                    type=\"india\"\r\n                    height=\"89%\"\r\n                    width=\"105%\"\r\n                    dataFormat=\"JSON\"\r\n                    dataSource={this.dataSource}\r\n                  \r\n                />\r\n                </div>\r\n            </CardBody>\r\n        </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default IndiaMap;","import React from 'react';\r\nimport { Col, Card, CardBody, CardHeader, Row } from 'reactstrap';\r\nimport DataTable, { createTheme } from 'react-data-table-component';\r\n \r\nclass StateWiseData extends React.Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n    }\r\n    currentTheme(){\r\n        const body = document.body.classList;\r\n        let white = false;\r\n        Object.keys(body).map((e) => {if(body[e] === 'white-content') white = true;})\r\n        return white;\r\n    }\r\n    render()\r\n    {\r\n        const theme = this.currentTheme();\r\n        createTheme('solarized', {\r\n            text: {\r\n              primary: !theme ? \"#f2f2f2\" : \"#333333\",\r\n              secondary: '#2aa198',\r\n            },\r\n            background: {\r\n              default: !theme ? \"#27293d\" : \"#ffffff\",\r\n            },\r\n            divider:{\r\n                default: !theme ? \"#666666\" : \"#cccccc\",\r\n            },\r\n            context: {\r\n              background: '#cb4b16',\r\n              text: '#FFFFFF',\r\n            },\r\n            action: {\r\n              button: 'rgba(0,0,0,.54)',\r\n              hover: 'rgba(0,0,0,.08)',\r\n            },\r\n          });\r\n        let data = [];\r\n        let int = (a) => Number.parseInt(a);\r\n        let intf = (a) => Number.parseInt(a).toLocaleString();\r\n        let total = {};\r\n        this.props.data.forEach((element,index) => {\r\n            let cnf_str;\r\n            if(int(element['deltaconfirmed']) > 0) cnf_str = <div>\r\n                <div style={{color: '#ff3333', fontSize: '12px', textAlign:'center'}}>+{intf(element['deltaconfirmed'])}</div>\r\n                <div>{intf(element['confirmed'])}</div></div>\r\n            else cnf_str = <div><div>{intf(element['confirmed'])}</div></div>\r\n            let rec_str;\r\n            if(int(element['deltarecovered']) > 0) rec_str = <div>\r\n                <div style={{color: 'green', fontSize: '12px', textAlign:'center'}}>+{intf(element['deltarecovered'])}</div>\r\n                <div>{intf(element['recovered'])}</div></div>\r\n            else rec_str = <div><div>{intf(element['recovered'])}</div></div>\r\n            let dec_str;\r\n            if(int(element['deltadeaths']) > 0) dec_str = <div>\r\n                <div style={{color: 'gray', fontSize: '12px', textAlign:'center'}}>+{intf(element['deltadeaths'])}</div>\r\n                <div>{intf(element['deaths'])}</div></div>\r\n            else dec_str = <div><div>{intf(element['deaths'])}</div></div>\r\n            let ele = {id : index,\r\n                state : element['state'],\r\n                confirmed :   cnf_str,\r\n                confirmedsor : int(element['confirmed']),\r\n                active : intf(element['active']),\r\n                activesor : int(element['active']),\r\n                recovered : rec_str,\r\n                recoveredsor : int(element['recovered']),\r\n                deaths : dec_str,\r\n                deathssor : int(element['deaths'])\r\n               };\r\n            if(index != 0)\r\n            data.push(ele);\r\n            else total = ele;\r\n        });\r\n        data.push(total);\r\n        const columns = [\r\n        {\r\n            name: 'States / UT',\r\n            selector: 'state',\r\n            wrap: true,\r\n            center:false,\r\n            sortable:'true',\r\n            width: '30%',\r\n        },\r\n        {\r\n            name: 'Cofirmed',\r\n            selector: 'confirmed',\r\n            sortable: true,\r\n            allowOverflow:true,\r\n            center:true,\r\n            width: '18%',\r\n        },\r\n        {\r\n            name: 'Active',\r\n            selector: 'active',\r\n            sortable: true,\r\n            allowOverflow:true,\r\n            center:true,\r\n            width: '18%',\r\n        },\r\n        {\r\n            name: 'Recovered',\r\n            selector: 'recovered',\r\n            sortable: true,\r\n            allowOverflow:true,\r\n            center:true,\r\n            width: '18%',\r\n        },\r\n        {\r\n            name: 'Deaths',\r\n            selector: 'deaths',\r\n            sortable: true,\r\n            allowOverflow:true,\r\n            center:true,\r\n            width: '16%',\r\n        }\r\n        ];\r\n        const customStyles = {\r\n            rows: {\r\n              style: {\r\n                minHeight: '45px',\r\n                fontSize: '15px',\r\n                width: '100%'\r\n              }\r\n            },\r\n            headCells: {\r\n                style: {\r\n                    fontSize: '17px',\r\n                    fontWeight: 400,\r\n                    color: !theme ? \"#333333\" : \"#262626\",\r\n                    background: '#cccccc',\r\n                    width: '100%'\r\n                }\r\n            },\r\n            cells: {\r\n                style: {\r\n                  width: '100%',\r\n                  align: 'left',\r\n                },\r\n              },\r\n          }; \r\n        this.sortFunction = (rows,field,direction) => {\r\n            if(field == 'state') \r\n            rows.sort((a,b) => ((direction === 'desc') ? -1 : 1) * a[field].localeCompare(b[field]));\r\n            else rows.sort((a,b) => {\r\n                if(direction === 'asc') return a[field+'sor']-b[field+'sor'];\r\n                else return b[field+'sor']-a[field+'sor'];\r\n            });\r\n            let ele = [];\r\n            let tot = {};\r\n            rows.forEach(element => {\r\n                if(element.id == 0) tot = element;\r\n                else ele.push(element);\r\n            });\r\n            ele.push(tot);\r\n            return ele;\r\n        };\r\n            \r\n        return (\r\n            <>\r\n            <Card className=\"card-chart\">\r\n                <CardBody style={{padding: '2% 2%'}}>\r\n                <DataTable\r\n                    title='Statewise Data'\r\n                    columns={columns}\r\n                    data={data}\r\n                    theme=\"solarized\"\r\n                    customStyles={customStyles}\r\n                    highlightOnHover= {true}\r\n                    sortFunction={this.sortFunction}\r\n                />\r\n                </CardBody>\r\n              </Card>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StateWiseData;","export const STATE_NAMES = {\r\n    AP: 'Andhra Pradesh',\r\n    AR: 'Arunachal Pradesh',\r\n    AS: 'Assam',\r\n    BR: 'Bihar',\r\n    CT: 'Chhattisgarh',\r\n    GA: 'Goa',\r\n    GJ: 'Gujarat',\r\n    HR: 'Haryana',\r\n    HP: 'Himachal Pradesh',\r\n    JH: 'Jharkhand',\r\n    KA: 'Karnataka',\r\n    KL: 'Kerala',\r\n    MP: 'Madhya Pradesh',\r\n    MH: 'Maharashtra',\r\n    MN: 'Manipur',\r\n    ML: 'Meghalaya',\r\n    MZ: 'Mizoram',\r\n    NL: 'Nagaland',\r\n    OR: 'Odisha',\r\n    PB: 'Punjab',\r\n    RJ: 'Rajasthan',\r\n    SK: 'Sikkim',\r\n    TN: 'Tamil Nadu',\r\n    TG: 'Telangana',\r\n    TR: 'Tripura',\r\n    UT: 'Uttarakhand',\r\n    UP: 'Uttar Pradesh',\r\n    WB: 'West Bengal',\r\n    AN: 'Andaman and Nicobar Islands',\r\n    CH: 'Chandigarh',\r\n    DN: 'Dadra and Nagar Haveli and Daman and Diu',\r\n    DL: 'Delhi',\r\n    JK: 'Jammu and Kashmir',\r\n    LA: 'Ladakh',\r\n    LD: 'Lakshadweep',\r\n    PY: 'Puducherry',\r\n    TT: 'Total',\r\n    UN: 'Unassigned',\r\n  };\r\n\r\n  export const STATE_ID_CODES = {\r\n    AP: '002',\r\n    AR: '003',\r\n    AS: '004',\r\n    BR: '005',\r\n    CT: '007',\r\n    GA: '011',\r\n    GJ: '012',\r\n    HR: '013',\r\n    HP: '014',\r\n    JH: '016',\r\n    KA: '017',\r\n    KL: '018',\r\n    MP: '020',\r\n    MH: '021',\r\n    MN: '022',\r\n    ML: '023',\r\n    MZ: '024',\r\n    NL: '025',\r\n    OR: '026',\r\n    PB: '028',\r\n    RJ: '029',\r\n    SK: '030',\r\n    TN: '031',\r\n    TG: '036',\r\n    TR: '032',\r\n    UT: '034',\r\n    UP: '033',\r\n    WB: '035',\r\n    AN: '001',\r\n    CH: '006',\r\n    DN: '008',\r\n    DL: '010',\r\n    JK: '015',\r\n    LD: '019',\r\n    PY: '027'\r\n  };\r\n  \r\nconst stateCodes = [];\r\nconst stateCodesMap = {};\r\n\r\nObject.keys(STATE_NAMES).map((key, index) => {\r\n  stateCodesMap[STATE_NAMES[key]] = key;\r\n  stateCodes.push({code: key, name: STATE_NAMES[key]});\r\n  return null;\r\n});\r\nexport const STATE_CODES = stateCodesMap;\r\nexport const STATE_CODES_ARRAY = stateCodes;\r\n\r\n// Source: Projected Populations (2019)\r\n// National Commission on Population, \"Population Projections for India and\r\n// States (2011-2036)\", Table-8 (p43), November 2019\r\n// https://nhm.gov.in/New_Updates_2018/Report_Population_Projection_2019.pdf\r\nexport const STATE_POPULATIONS = {\r\n  AP: 52221000,\r\n  AR: 1504000,\r\n  AS: 34293000,\r\n  BR: 119520000,\r\n  CT: 28724000,\r\n  GA: 1540000,\r\n  GJ: 67936000,\r\n  HR: 28672000,\r\n  HP: 7300000,\r\n  JH: 37403000,\r\n  KA: 65798000,\r\n  KL: 35125000,\r\n  MP: 82232000,\r\n  MH: 122153000,\r\n  MN: 3103000,\r\n  ML: 3224000,\r\n  MZ: 1192000,\r\n  NL: 2150000,\r\n  OR: 43671000,\r\n  PB: 29859000,\r\n  RJ: 77264000,\r\n  SK: 664000,\r\n  TN: 75695000,\r\n  TG: 37220000,\r\n  TR: 3992000,\r\n  UP: 224979000,\r\n  UT: 11141000,\r\n  WB: 96906000,\r\n  AN: 397000,\r\n  CH: 1179000,\r\n  DN: 959000,\r\n  DL: 19814000,\r\n  JK: 13203000,\r\n  LA: 293000,\r\n  LD: 68000,\r\n  PY: 1504000,\r\n  TT: 1332900000,\r\n};\r\n\r\nexport const STATE_POPULATIONS_MIL = Object.keys(STATE_POPULATIONS).reduce(\r\n  (res, stateCode) => {\r\n    res[stateCode] = 1e-6 * STATE_POPULATIONS[stateCode];\r\n    return res;\r\n  },\r\n  {}\r\n);","import React from \"react\";\r\nimport Axios from 'axios';\r\nimport NumberPanel from \"./segments/NumberPanel\";\r\nimport AllInOneGraph from \"./segments/AllInOneGraph\";\r\nimport Top10India from \"./segments/Top10India\";\r\nimport IndiaMap from \"./segments/IndiaMap\";\r\nimport StateWiseData from \"./segments/StateWiseData\";\r\nimport {cnf, rec, dec, pop, ppm, mor, tst, tpm} from './segments/MapData';\r\nimport {BrowserView} from 'react-device-detect';\r\nimport {\r\n    STATE_ID_CODES, \r\n    STATE_POPULATIONS, \r\n    STATE_POPULATIONS_MIL,\r\n    STATE_NAMES\r\n} from '../../constants';\r\nimport { Row, Col } from \"reactstrap\";\r\n\r\nclass CoronaIndia extends React.Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = \r\n        {\r\n            time_series : null,\r\n            current_number : null,\r\n        }\r\n    }\r\n    componentDidMount()\r\n    {\r\n        Axios.get('https://api.covid19india.org/data.json')\r\n        .then( response => {\r\n            let series = response.data['cases_time_series'];\r\n            let tests = response.data['tested'];\r\n            let curr = response.data['statewise'][0];\r\n            let cr_status = {\r\n                ...curr,\r\n                ...tests[tests.length-1]\r\n            };\r\n            let topstates = response.data['statewise'];\r\n            Axios.get('https://api.covid19india.org/v3/min/data.min.json')\r\n            .then( response => {\r\n                let statewise = {};\r\n                Object.values(STATE_ID_CODES).map((element,index) => {\r\n                    statewise[element] = {};  return null;\r\n                });\r\n                let options = ['confirmed', 'deceased', 'recovered', 'tested'];\r\n                Object.keys(response.data).map((key, index) => {\r\n                    if(key in STATE_ID_CODES)\r\n                    {\r\n                        let Obj = response.data[key]['total'];\r\n                        options.forEach(e => {\r\n                            if(Obj !== undefined && e in Obj) statewise[STATE_ID_CODES[key]][e] = Obj[e];\r\n                            else statewise[STATE_ID_CODES[key]][e] = 0;\r\n                        });\r\n                        statewise[STATE_ID_CODES[key]]['population'] = STATE_POPULATIONS[key];\r\n                        statewise[STATE_ID_CODES[key]]['ppm'] = STATE_POPULATIONS_MIL[key];\r\n                        statewise[STATE_ID_CODES[key]]['state'] = STATE_NAMES[key];\r\n                        statewise[STATE_ID_CODES[key]]['statecode'] = key;\r\n                    }\r\n                    else if(key === 'LA')\r\n                    {\r\n                        let Obj = response.data['LA']['total'];\r\n                        options.forEach(e => {\r\n                            if(Obj !== undefined && e in Obj) statewise[STATE_ID_CODES['JK']][e] += Obj[e];\r\n                        });\r\n                        statewise[STATE_ID_CODES['JK']]['population'] += STATE_POPULATIONS[key];\r\n                        statewise[STATE_ID_CODES['JK']]['ppm'] += STATE_POPULATIONS_MIL[key];\r\n                    }\r\n                });\r\n                let flt = (e) => Number.parseFloat(e);\r\n                Object.keys(statewise).map(key => {\r\n                    statewise[key]['mor'] = (flt(statewise[key]['deceased']*1e2)/flt(statewise[key]['confirmed'])).toFixed(3);\r\n                    statewise[key]['tpm'] = (flt(statewise[key]['tested']*1e6)/flt(statewise[key]['population'])).toFixed(1);\r\n                    statewise[key]['ppm'] = (flt(statewise[key]['confirmed']*1e6)/flt(statewise[key]['population'])).toFixed(1);\r\n                });\r\n                this.setState({\r\n                    time_series : series,\r\n                    current_number : cr_status,\r\n                    topstates : topstates,\r\n                    statewise: statewise\r\n                });\r\n            });\r\n        });\r\n    }\r\n    \r\n    RenderWhenNotNull = (flag) => {\r\n        if(!flag) return null;\r\n        this.maps2 = []; this.maps3 = [];\r\n        let flt = (e) => Number.parseFloat(e);\r\n        let cnf2 = [];\r\n        \r\n        Object.keys(STATE_NAMES).map(element => {\r\n            if(STATE_ID_CODES[element] !== undefined)\r\n            cnf2.push({id: element,\r\n                 state: STATE_NAMES[element],\r\n                 value: this.state.statewise[STATE_ID_CODES[element]]['confirmed']\r\n                });\r\n        }); \r\n        Object.keys(this.state.statewise).map(element => {\r\n            cnf['data'].push({id : element, value : this.state.statewise[element]['confirmed']});\r\n            rec['data'].push({id : element, value : this.state.statewise[element]['recovered']});\r\n            dec['data'].push({id : element, value : this.state.statewise[element]['deceased']});\r\n            pop['data'].push({id : element, value : this.state.statewise[element]['population']});\r\n            ppm['data'].push({id : element, \r\n                value : flt(this.state.statewise[element]['confirmed']*1e6)/flt(this.state.statewise[element]['population'])});\r\n            mor['data'].push({id : element, \r\n                value : flt(this.state.statewise[element]['deceased']*1e2)/flt(this.state.statewise[element]['confirmed'])});\r\n            tst['data'].push({id : element, value : this.state.statewise[element]['tested']});\r\n            tpm['data'].push({id : element, \r\n                value : flt(this.state.statewise[element]['tested']*1e6)/flt(this.state.statewise[element]['population'])});\r\n        });\r\n        let inf = a => Number.parseFloat(a);\r\n        let int = a => (Number.parseInt(a)).toLocaleString();\r\n        cnf['sideNote'] = int(this.state.current_number['confirmed']);\r\n        rec['sideNote'] = int(this.state.current_number['recovered']);\r\n        dec['sideNote'] = int(this.state.current_number['deaths']);\r\n        tst['sideNote'] = int(this.state.current_number['totalsamplestested']);\r\n        mor['sideNote'] = ((inf(dec['sideNote'])*100.0)/inf(cnf['sideNote'])).toFixed(3);\r\n        tpm['sideNote'] = ((inf(this.state.current_number['totalsamplestested'])*1000000.0)/inf('1332900000')).toFixed(2);\r\n        ppm['sideNote'] = ((inf(this.state.current_number['confirmed'])*1000000.0)/inf('1332900000')).toFixed(2);\r\n\r\n        this.maps1 = [cnf, rec, dec, tst];\r\n        //console.log(cnf2);\r\n        if(flag) return(\r\n            <>\r\n            <NumberPanel data={this.state.current_number}/>\r\n            <Row >\r\n                <Col xs='12' sm='12' md='7'>\r\n                    <AllInOneGraph data={this.state.time_series}/>\r\n                </Col>\r\n                <Col xs=\"12\" sm=\"12\" md=\"5\">\r\n                    <Top10India data={this.state.statewise} number={5} type=\"confirmed\" text=\"Confirmed\"/>\r\n                </Col>\r\n            </Row>\r\n            <Row >\r\n                <Col xs='12' md='7'>\r\n                    <StateWiseData style={{maxHeight: '700px'}} data={this.state.topstates}/>\r\n                </Col>\r\n                <Col xs='12' md='5'>\r\n                    <Row>\r\n                        <Col  xs='12' lg='12'>\r\n                            <BrowserView>\r\n                                {this.maps1.map((element,index) => {\r\n                                    return (\r\n                                        <IndiaMap  key={index} label={0} data={element} height={'370px'} /> \r\n                                    );\r\n                                })}\r\n                            </BrowserView>\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col xs='12' sm='12' md='5'>\r\n                   <BrowserView><IndiaMap  data={mor} height={'410px'}/></BrowserView>\r\n                </Col>\r\n                <Col xs=\"12\" sm=\"12\" md=\"7\">\r\n                    <Top10India data={this.state.statewise} label={0} number={6} type=\"mor\" text=\"Mortality Rate\"/>       \r\n                </Col>     \r\n            </Row>\r\n            <Row>\r\n                <Col xs=\"12\" sm=\"12\" md=\"7\">\r\n                    <Top10India data={this.state.statewise} label={0} number={6} type=\"tpm\" text=\"Tested Per Million\"/>       \r\n                </Col>   \r\n                <Col xs='12' sm='12' md='5'>\r\n                   <BrowserView><IndiaMap  data={tpm} height={'410px'}/></BrowserView>\r\n                </Col>  \r\n            </Row>\r\n            <Row>\r\n                <Col xs='12' sm='12' md='5'>\r\n                   <BrowserView><IndiaMap  data={ppm} height={'410px'}/></BrowserView>\r\n                </Col>\r\n                <Col xs=\"12\" sm=\"12\" md=\"7\">\r\n                    <Top10India data={this.state.statewise} label={0} number={6} type=\"ppm\" text=\"Confirmed Per Million\"/>       \r\n                </Col>     \r\n            </Row>\r\n            </>\r\n        );\r\n    }\r\n    render()\r\n    { \r\n        return(\r\n            <div className='content'>\r\n                {this.RenderWhenNotNull(this.state.statewise)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CoronaIndia;","import React from \"react\";\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport CommaNumber from 'comma-number';\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardTitle,\r\n  Row,\r\n  Col\r\n} from \"reactstrap\";\r\n\r\n\r\nclass NumberPanel extends React.Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            showMessage : true\r\n        };\r\n    }\r\n\r\n    int = (str) => {\r\n        let e = \"\";\r\n        for(let i=0; i<str.length; i++)\r\n        {\r\n            if(str[i] - '0' >= 0 || str[i] - '0' <= 9) e+=str[i];\r\n        }\r\n        return Number.parseInt(e);\r\n    }\r\n    \r\n    render(){\r\n        if(this.props.data == null) return null;\r\n        let confirmed = this.props.data['TotalCases'];\r\n        let deceased = this.props.data['TotalDeaths'];\r\n        let recovered = this.props.data['TotalRecovered'];\r\n        let active = CommaNumber(this.int(this.props.data['TotalCases']) \r\n                        - this.int(this.props.data['TotalDeaths']) \r\n                        - this.int(this.props.data['TotalRecovered']));\r\n        let dcon = this.int(this.props.data['NewCases']);\r\n        let drec = this.int(this.props.data['NewRecovered']);\r\n        let ddec = this.int(this.props.data['NewDeaths']);\r\n        let dact = dcon - drec - ddec;\r\n        let dconfirmed = \"[ \"+this.props.data['NewCases']+\" ]\";\r\n        let ddeceased = \"[ \"+this.props.data['NewDeaths']+\" ]\";\r\n        let drecovered = \"[ \"+this.props.data['NewRecovered']+\" ]\";\r\n        let dactive = \"[ \"+((dact > 0) ? \"+\" : \"\") + CommaNumber(dact)+\" ]\";\r\n        let listContent = [\r\n            [3, \"Confirmed\", \"text-danger\", confirmed, dconfirmed],\r\n            [3, \"Active\", \"text-primary\", active, dactive],\r\n            [3, \"Recovered\", \"text-success\", recovered, drecovered],\r\n            [3, \"Deceased\", \"text-defalut\", deceased, ddeceased]\r\n        ];\r\n        //const link\r\n        const list = listContent.map((ele, key) => {\r\n            let link = null, update= null;\r\n            update = <div style={{fontSize : \"15px\"}}>{ele[4]}</div>;\r\n            return (\r\n                <Col lg={ele[0]} key={key}>\r\n                <Card className=\"card-chart\">\r\n                    <CardHeader>\r\n                    <h1 className=\"card-category\">\r\n                        <span className=\"card-big-text\"> {ele[1]} </span>\r\n                    </h1>\r\n                    {update}\r\n                    <CardTitle tag=\"h4\">\r\n                        <i className={\"tim-icons icon-world \"+ele[2]} />{\" \"}\r\n                        {ele[3]}\r\n                    </CardTitle>\r\n                    </CardHeader>\r\n                </Card>\r\n                </Col>\r\n            );\r\n        });\r\n        return (\r\n      \r\n            <>\r\n                <CSSTransition\r\n                    in={this.state.showMessage}\r\n                    timeout={200}\r\n                    appear={true}\r\n                    classNames=\"fader\"\r\n                >\r\n                    <Row>\r\n                        {list}\r\n                    </Row>\r\n                </CSSTransition>\r\n            </>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default NumberPanel;","import React from 'react';\r\nimport { Col, Card, CardBody, CardHeader, Row } from 'reactstrap';\r\nimport DataTable, { createTheme } from 'react-data-table-component';\r\n \r\nclass CountryWiseData extends React.Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n    }\r\n    currentTheme(){\r\n        const body = document.body.classList;\r\n        let white = false;\r\n        Object.keys(body).map((e) => {if(body[e] === 'white-content') white = true;})\r\n        return white;\r\n    }\r\n    render()\r\n    {\r\n        let int = (str) => {\r\n            if(str === undefined) return 0;\r\n            let e = \"\";\r\n            for(let i=0; i<str.length; i++)\r\n            {\r\n                if(str[i] - '0' >= 0 || str[i] - '0' <= 9) e+=str[i];\r\n                if(str[i] == '.') break;\r\n            }\r\n            return Number.parseInt(e);\r\n        }\r\n        const theme = this.currentTheme();\r\n        createTheme('solarized', {\r\n            text: {\r\n              primary: !theme ? \"#f2f2f2\" : \"#333333\",\r\n              secondary: '#2aa198',\r\n            },\r\n            background: {\r\n              default: !theme ? \"#27293d\" : \"#ffffff\",\r\n            },\r\n            divider:{\r\n                default: !theme ? \"#666666\" : \"#cccccc\",\r\n            },\r\n            context: {\r\n              background: '#cb4b16',\r\n              text: '#FFFFFF',\r\n            },\r\n            action: {\r\n              button: 'rgba(0,0,0,.54)',\r\n              hover: 'rgba(0,0,0,.08)',\r\n            },\r\n          });\r\n        let data = [];\r\n        let total = {};\r\n        this.props.data.forEach((element,index) => {\r\n            let cnf_str;\r\n            if(int(element['NewCases']) > 0) cnf_str = <div>\r\n                <div style={{color: '#ff3333', fontSize: '12px', textAlign:'center'}}>{element['NewCases']}</div>\r\n                <div>{element['TotalCases']}</div></div>\r\n            else cnf_str = <div><div>{element['TotalCases']}</div></div>\r\n            let rec_str;\r\n            if(int(element['NewRecovered']) > 0) rec_str = <div>\r\n                <div style={{color: 'green', fontSize: '12px', textAlign:'center'}}>{(element['NewRecovered'])}</div>\r\n                <div>{element['TotalRecovered']}</div></div>\r\n            else rec_str = <div><div>{element['TotalRecovered']}</div></div>\r\n            let dec_str;\r\n            if(int(element['NewDeaths']) > 0) dec_str = <div>\r\n                <div style={{color: 'gray', fontSize: '12px', textAlign:'center'}}>{(element['NewDeaths'])}</div>\r\n                <div>{element['TotalDeaths']}</div></div>\r\n            else dec_str = <div><div>{element['TotalDeaths']}</div></div>\r\n            let ele = {id : index,\r\n                country : element['Country'],\r\n                confirmed :   cnf_str,\r\n                confirmedsor : int(element['TotalCases']),\r\n                active : element['ActiveCases'],\r\n                activesor : int(element['ActiveCases']),\r\n                recovered : rec_str,\r\n                recoveredsor : int(element['TotalRecovered']),\r\n                deaths : dec_str,\r\n                deathssor : int(element['TotalDeaths']),\r\n                tests : element['TotalTests'],\r\n                testssor : int(element['TotalTests']),\r\n                cpm : element['TotCases_1M_Pop'],\r\n                cpmsor : int(element['TotCases_1M_Pop']),\r\n                dpm : element['Deaths_1M_pop'],\r\n                dpmsor : int(element['Deaths_1M_pop']),\r\n                tpm : element['Tests_1M_Pop'],\r\n                tpmsor : int(element['Tests_1M_Pop'])\r\n               };\r\n            if(index != 0)\r\n            data.push(ele);\r\n            else total = ele;\r\n        });\r\n        data.push(total);\r\n        const columns = [\r\n        {\r\n            name: 'Country',\r\n            selector: 'country',\r\n            wrap: true,\r\n            center:false,\r\n            sortable:'true',\r\n            width: '16%',\r\n        },\r\n        {\r\n            name: 'Cofirmed',\r\n            selector: 'confirmed',\r\n            sortable: true,\r\n            allowOverflow:true,\r\n            center:true,\r\n            width: '11%',\r\n        },\r\n        {\r\n            name: 'Active',\r\n            selector: 'active',\r\n            sortable: true,\r\n            allowOverflow:true,\r\n            center:true,\r\n            width: '11%',\r\n        },\r\n        {\r\n            name: 'Recovered',\r\n            selector: 'recovered',\r\n            sortable: true,\r\n            allowOverflow:true,\r\n            center:true,\r\n            width: '10%',\r\n        },\r\n        {\r\n            name: 'Deaths',\r\n            selector: 'deaths',\r\n            sortable: true,\r\n            allowOverflow:true,\r\n            center:true,\r\n            width: '10%',\r\n        },\r\n        {\r\n            name: 'Tests',\r\n            selector: 'tests',\r\n            sortable: true,\r\n            allowOverflow:true,\r\n            center:true,\r\n            width: '12%',\r\n        },\r\n        {\r\n            name: 'Cases/1M',\r\n            selector: 'cpm',\r\n            sortable: true,\r\n            allowOverflow:true,\r\n            center:true,\r\n            width: '10%',\r\n        },\r\n        {\r\n            name: 'Deaths/1M',\r\n            selector: 'dpm',\r\n            sortable: true,\r\n            allowOverflow:true,\r\n            center:true,\r\n            width: '10%',\r\n        },\r\n        {\r\n            name: 'Tests/1M',\r\n            selector: 'tpm',\r\n            sortable: true,\r\n            allowOverflow:true,\r\n            center:true,\r\n            width: '10%',\r\n        }\r\n        ];\r\n        const customStyles = {\r\n            rows: {\r\n              style: {\r\n                minHeight: '45px',\r\n                fontSize: '15px',\r\n                width: '100%'\r\n              }\r\n            },\r\n            headCells: {\r\n                style: {\r\n                    fontSize: '17px',\r\n                    fontWeight: 400,\r\n                    color: !theme ? \"#333333\" : \"#262626\",\r\n                    background: '#cccccc',\r\n                    width: '100%'\r\n                }\r\n            },\r\n            cells: {\r\n                style: {\r\n                  width: '100%',\r\n                  align: 'left',\r\n                },\r\n              },\r\n          }; \r\n        this.sortFunction = (rows,field,direction) => {\r\n            if(field == 'country') \r\n            rows.sort((a,b) => ((direction === 'desc') ? -1 : 1) * a[field].localeCompare(b[field]));\r\n            else rows.sort((a,b) => {\r\n                if(direction === 'asc') return a[field+'sor']-b[field+'sor'];\r\n                else return b[field+'sor']-a[field+'sor'];\r\n            });\r\n            let ele = [];\r\n            let tot = {};\r\n            rows.forEach(element => {\r\n                ele.push(element);\r\n            });\r\n            //ele.push(tot);\r\n            console.log(ele);\r\n            return ele;\r\n        };\r\n            \r\n        return (\r\n            <>\r\n            <Card className=\"card-chart\">\r\n                <CardBody style={{padding: '2% 2%'}}>\r\n                <DataTable\r\n                    title='Statewise Data'\r\n                    columns={columns}\r\n                    data={data}\r\n                    theme=\"solarized\"\r\n                    customStyles={customStyles}\r\n                    highlightOnHover= {true}\r\n                    pagination={true}\r\n                    paginationPerPage={15}\r\n                    paginationRowsPerPageOptions={[15,50,100]}\r\n                    sortFunction={this.sortFunction}\r\n                />\r\n                </CardBody>\r\n              </Card>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CountryWiseData;","import React from 'react';\r\nimport Axios from 'axios';\r\nimport Loader from 'react-loader-spinner';\r\nimport NumberPanel from \"./segments/NumberPanel\";\r\nimport CountryWiseData from './segments/CountryWiseData';\r\nimport { Row, Col } from 'reactstrap';\r\n\r\nconst ls = require('local-storage');\r\nclass CoronaWorld extends React.Component{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.graphCss = {width: '100%', height: '500px', border: '0px none'};\r\n        let fetcher = false, world_data = null, countrywise_data = null;\r\n        if(!ls.get('covid19worldtime') || !ls.get('covid19worlddata') || Date.now() - ls.get('covid19worldtime') > 2000000)\r\n        {\r\n            ls.set('covid19worldtime',Date.now());\r\n            fetcher = true;\r\n        }\r\n        if(!fetcher) \r\n        {\r\n            world_data = ls.get('covid19worlddata');\r\n            countrywise_data = ls.get('covid19countrywisedata');\r\n        }\r\n        this.state = \r\n        {\r\n            world_data : world_data,\r\n            countrywise_data : countrywise_data,\r\n            loader : fetcher,\r\n            fetcher : fetcher\r\n        }\r\n        \r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n        if(this.state.fetcher)\r\n        {\r\n            Axios.get('https://covid19api.io/api/v1/AllReports')\r\n            .then( response => {\r\n                ls.set('covid19worlddata',response.data['reports'][0]['table'][0][0]);\r\n                ls.set('covid19countrywisedata',response.data['reports'][0]['table'][0].slice(0,-1));\r\n                this.setState({\r\n                    world_data : response.data['reports'][0]['table'][0][0],\r\n                    countrywise_data : response.data['reports'][0]['table'][0].slice(0,-1),\r\n                    loader: false\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    RenderWhenNotNull = (flg) => {\r\n        console.log(this.state.world_data);\r\n        if(flg)\r\n        return (\r\n            <div>\r\n                <NumberPanel data={this.state.world_data} />\r\n                <Row style={{marginBottom : '30px'}}>\r\n                    <Col sm='12' md='6'>\r\n                    <iframe src=\"https://ourworldindata.org/grapher/total-cases-covid-19?country=BRA~IND~IRN~ITA~RUS~ESP~GBR~USA\" \r\n                     style={this.graphCss}></iframe>\r\n                    </Col>\r\n                    <Col sm='12' md='6'>\r\n                    <iframe src=\"https://ourworldindata.org/grapher/total-deaths-covid-19?country=BEL~BRA~CAN~FRA~IND~IRN~ITA~MEX~RUS~GBR~USA\" \r\n                     style={this.graphCss}></iframe>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs='12' md='12'>\r\n                        <CountryWiseData data={this.state.countrywise_data} />\r\n                    </Col>\r\n                </Row>\r\n                <Row style={{marginBottom : '30px'}}>\r\n                    <Col sm='12' md='6'>\r\n                    <iframe src=\"https://ourworldindata.org/grapher/daily-covid-cases-3-day-average?country=FRA~DEU~IND~ITA~RUS~KOR~ESP~GBR~USA~BRA\" \r\n                    loading=\"lazy\" style={this.graphCss}></iframe>\r\n                    </Col>\r\n                    <Col sm='12' md='6'>\r\n                    <iframe src=\"https://ourworldindata.org/grapher/daily-deaths-covid-19?country=BRA~RUS~GBR~USA~IND~IRN~ITA\" \r\n                    loading=\"lazy\" style={this.graphCss}></iframe>\r\n                    </Col>\r\n                </Row>\r\n                <Row style={{marginBottom : '30px'}}>\r\n                    <Col sm='12' md='6'>\r\n                    <iframe src=\"https://ourworldindata.org/grapher/total-confirmed-cases-of-covid-19-per-million-people\" \r\n                    loading=\"lazy\" style={this.graphCss}></iframe>\r\n                    </Col>\r\n                    <Col sm='12' md='6'>\r\n                    <iframe src=\"https://ourworldindata.org/grapher/total-covid-deaths-per-million\" \r\n                    loading=\"lazy\" style={this.graphCss}></iframe>\r\n                    </Col>\r\n                </Row>\r\n                <Row style={{marginBottom : '30px'}}>\r\n                    <Col sm='12' md='6'>\r\n                    <iframe src=\"https://ourworldindata.org/grapher/coronavirus-cfr?country=BRA~DEU~IND~ITA~RUS~KOR~ESP~OWID_WRL\" \r\n                    loading=\"lazy\" style={this.graphCss}></iframe>\r\n                    </Col>\r\n                    <Col sm='12' md='6'>\r\n                    <iframe src=\"https://ourworldindata.org/grapher/number-of-covid-19-tests-per-confirmed-case?country=IDN~CAN~DEU~SWE~TWN~USA~KOR~ITA~VNM~JPN~IND~ZAF~NZL~AUS~PHL~GBR~SGP~ARG~MEX~BRA\" \r\n                    loading=\"lazy\" style={this.graphCss}></iframe>\r\n                    </Col>\r\n                </Row>\r\n                <Row style={{marginBottom : '5px'}}>\r\n                    <Col sm='12' md='12'>\r\n                    <iframe src=\"https://ourworldindata.org/grapher/full-list-cumulative-total-tests-per-thousand-map\" \r\n                    loading=\"lazy\" style={this.graphCss}></iframe>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    Loading = (flag) => {\r\n        if(flag)\r\n        return(\r\n            <div style={{marginLeft: '45%', marginTop: '20%' }}>\r\n            <Loader\r\n                type=\"TailSpin\"\r\n                color=\"#00BFFF\"\r\n                height={100}\r\n                width={100}\r\n                timeout={5000}\r\n            /></div>\r\n        );\r\n    }\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <div className='content'>\r\n                {this.Loading(this.state.loader)}\r\n                {this.RenderWhenNotNull(this.state.world_data)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default CoronaWorld;","import React from 'react';\r\nimport CoronaIndia from './views/corona_india';\r\nimport CoronaWorld from './views/corona_world';\r\n\r\nvar routes = [\r\n  {\r\n    path: \"india\",\r\n    name: \"Covid-19 India\",\r\n    icon: \"tim-icons icon-chart-pie-36\",\r\n    component: CoronaIndia,\r\n    layout: \"/\"\r\n  },\r\n  {\r\n    path: \"world\",\r\n    name: \"Covid-19 World\",\r\n    icon: \"tim-icons icon-chart-pie-36\",\r\n    component: CoronaWorld,\r\n    layout: \"/\"\r\n  }\r\n];\r\n\r\nexport default routes;\r\n","import React from \"react\";\r\nimport {Route, Switch, Redirect} from \"react-router-dom\";\r\nimport ClassNames from 'classnames';\r\n\r\n//Components\r\nimport Sidebar from \"../components/sidebar/sidebar\";\r\nimport Footer from \"../components/footer/footer\";\r\nimport Navbar from \"../components/navbar\";\r\n\r\n//Routes\r\nimport routes from \"../routes.js\";\r\n\r\n//Logo\r\nimport logo from \"../assets/img/logo.PNG\";\r\n\r\nclass Main extends React.Component\r\n{\r\n    constructor(props) {\r\n       super(props);\r\n       this.state = {\r\n         backgroundColor: \"blue\",\r\n         sidebarOpened:\r\n           document.documentElement.className.indexOf(\"nav-open\") !== -1\r\n       };\r\n    }\r\n\r\n  toggleSidebar = () => {\r\n    document.documentElement.classList.toggle(\"nav-open\");\r\n    this.setState({ sidebarOpened: !this.state.sidebarOpened });\r\n  };\r\n  getRoutes = routes => {\r\n    console.log(routes.map((prop, key) => {\r\n      return (\r\n        <Route\r\n          path={prop.layout + prop.path}\r\n          component={prop.component}\r\n          key={key}\r\n        />\r\n      );\r\n  }));\r\n    return routes.map((prop, key) => {\r\n        return (\r\n          <Route\r\n            path={prop.layout + prop.path}\r\n            component={prop.component}\r\n            key={key}\r\n          />\r\n        );\r\n    });\r\n  };\r\n  handleBgClick = color => {\r\n    this.setState({ backgroundColor: color });\r\n  };\r\n  getBrandText = path => {\r\n    for (let i = 0; i < routes.length; i++) {\r\n      if (\r\n        this.props.location.pathname.indexOf(\r\n          routes[i].layout + routes[i].path\r\n        ) !== -1\r\n      ) {\r\n        return routes[i].name;\r\n      }\r\n    }\r\n    return \"\";\r\n  };\r\n  render() {\r\n      \r\n      return (\r\n      <>\r\n      <div className=\"wrapper\">\r\n      <Sidebar {...this.props}\r\n            routes={routes}\r\n            bgColor={this.state.backgroundColor}\r\n            logo={{\r\n              outterLink: \"\",\r\n              text: \"Visuospace\",\r\n              imgSrc: logo\r\n            }}\r\n            toggleSidebar={this.toggleSidebar}\r\n          />\r\n          <div\r\n            className=\"main-panel\"\r\n            ref=\"mainPanel\"\r\n            data={this.state.backgroundColor}\r\n          >\r\n          <Navbar\r\n              {...this.props}\r\n              brandText={this.getBrandText(this.props.location.pathname)}\r\n              toggleSidebar={this.toggleSidebar}\r\n              sidebarOpened={this.state.sidebarOpened}\r\n            />\r\n          <Switch>\r\n              {this.getRoutes(routes)}\r\n              <Redirect from=\"*\" to=\"/india\"/>\r\n            </Switch>\r\n          </div>\r\n      </div>\r\n      <Footer />\r\n      </>\r\n      );\r\n    } \r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\nimport Main from './layouts/main';\n\nimport \"./assets/css/nucleo-icons.css\";\nimport \"./assets/scss/black-dashboard-react.scss\";\n\nclass App extends React.Component {\n  render(){\n    return (\n      <div className=\"\">\n      <Main {...this.props}/> \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Router, Route, Switch } from \"react-router-dom\";\n\nimport {createBrowserHistory} from 'history';\n\nconst hist = createBrowserHistory();\n\nReactDOM.render(\n  <Router history={hist}>\n    <Switch>\n      <Route path=\"/\" render={props => <App {...props} />} />\n    </Switch>\n  </Router>\n  ,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","let OptionLine = {\r\n    maintainAspectRatio: false,\r\n    legend: {\r\n      display: false\r\n    },\r\n    tooltips: {\r\n      backgroundColor: \"#f5f5f5\",\r\n      titleFontColor: \"#333\",\r\n      bodyFontColor: \"#666\",\r\n      bodySpacing: 4,\r\n      xPadding: 12,\r\n      mode: \"nearest\",\r\n      intersect: 0,\r\n      position: \"nearest\"\r\n    },\r\n    responsive: true,\r\n    scales: {\r\n      yAxes: [\r\n        {\r\n          barPercentage: 1.2,\r\n          stacked : true,\r\n          gridLines: {\r\n            drawBorder: false,\r\n            color: \"rgba(29,140,248,0.0)\",\r\n            zeroLineColor: \"transparent\"\r\n          },\r\n          ticks: {\r\n            suggestedMin: 100,\r\n            suggestedMax: 25,\r\n            padding: 20,\r\n            fontColor: \"#9a9a9a\"\r\n          }\r\n        }\r\n      ],\r\n      xAxes: [\r\n        {\r\n          barPercentage: 1,\r\n          gridLines: {\r\n            drawBorder: false,\r\n            color: \"rgba(29,140,248,0.1)\",\r\n            zeroLineColor: \"transparent\"\r\n          },\r\n          ticks: {\r\n            padding: 10,\r\n            fontColor: \"#9a9a9a\",\r\n            source: 'data',\r\n            autoSkip: true,\r\n            maxTicksLimit: 15\r\n          },\r\n  \r\n          bounds : 'labels',\r\n  \r\n        }\r\n      ]\r\n    }\r\n  };\r\nlet OptionBar = {\r\n  maintainAspectRatio: false,\r\n  legend: {\r\n    display: false\r\n  },\r\n  tooltips: {\r\n    backgroundColor: \"#f5f5f5\",\r\n    titleFontColor: \"#333\",\r\n    bodyFontColor: \"#666\",\r\n    bodySpacing: 4,\r\n    xPadding: 12,\r\n    mode: \"nearest\",\r\n    intersect: 0,\r\n    position: \"nearest\"\r\n  },\r\n  responsive: true,\r\n  scales: {\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          drawBorder: false,\r\n          color: \"rgba(225,78,202,0.1)\",\r\n          zeroLineColor: \"transparent\"\r\n        },\r\n        ticks: {\r\n          suggestedMin: 0,\r\n          suggestedMax: 10,\r\n          padding: 20,\r\n          fontColor: \"#9e9e9e\"\r\n        }\r\n      }\r\n    ],\r\n    xAxes: [\r\n      {\r\n        gridLines: {\r\n          drawBorder: false,\r\n          color: \"rgba(225,78,202,0.1)\",\r\n          zeroLineColor: \"transparent\"\r\n        },\r\n        ticks: {\r\n          padding: 20,\r\n          fontColor: \"#9e9e9e\"\r\n        }\r\n      }\r\n    ]\r\n  }\r\n}\r\n  module.exports = {\r\n      OptionLine, OptionBar\r\n  }"],"sourceRoot":""}